library(RCurl)
library(curl)
library(future)
library(furrr)
# read coordinates that are on land
coords <- read.csv("coords.csv")
api <- "https://merit.internetofwater.app/processes/river-runner/execution"
# remove Antarctica
coords2 <- coords[which(coords$Y>-56),]
# make API call URLs
urls <- paste0(api,"?lat=",coords2$Y,"&lng=",coords2$X)
urls <- na.omit(urls)
# make log data frame
log <- as.data.frame(cbind(urls,NA,NA))
names(log) <- c("urls","time","status")
## API function
get_path <- function(url,df){
if(url.exists(url)) {
resp <- httr::GET(url)
df$time[which(df$urls==url)] <- resp$times["total"]
df$status[which(df$urls==url)] <- resp$status
}
}
get_path(urls[1],log)
resp <- httr::GET(urls[1])
resp$times
resp$url
resp$request
get_path <- function(url,df){
if(url.exists(url)) {
resp <- httr::GET(url)
u = resp$url
t = resp$times["total"]
s = resp$status_code
}
return(list(u,t,s))
}
get_path <- function(url){
if(url.exists(url)) {
resp <- httr::GET(url)
u = resp$url
t = resp$times["total"]
s = resp$status_code
}
return(list(u,t,s))
}
get_path(urls[1])
url.exists(urls[1])
?url.exists
httr::GET(urls[1])
get_path <- function(url){
resp <- httr::GET(url)
u = resp$url
t = resp$times["total"]
s = resp$status_code
return(list(u,t,s))
}
get_path(urls[1])
get_path <- function(url){
resp <- httr::GET(url)
u = resp$url
t = resp$times["total"]
s = resp$status_code
return(data.frame(u,t,s))
}
get_path(urls[1])
x<-furrr::future_map(urls[1:10],get_path)
x
View(x)
x<-furrr::future_map_dfr(urls[1:10],get_path)
x
VIew(x)
View(x)
get_path <- function(url){
resp <- httr::GET(url)
url = resp$url
time_seconds = resp$times["total"]
status = resp$status_code
return(data.frame(u,t,s))
}
?future_map
library(magrittr)
availableCores()
?plan
x <- httr::GET(urls[1])
x
x$headers
x$headers$`x-cache`
y <- httr::GET("https://merit.internetofwater.app/processes/river-runner/execution?lat=48.9&lng=2.4")
y
y$headers
z <- sf::read_sf(y)
mapview::mapview(z)
availablesWorkers()
availableWorkers()
plan(multisession,workers=1)
system.time(log <-furrr::future_map_dfr(urls[1:10],get_path))
get_path <- function(url){
resp <- httr::GET(url)
url = resp$url
time_seconds = resp$times["total"]
status = resp$status_code
return(data.frame(url,time_seconds,status))
}
system.time(log <-furrr::future_map_dfr(urls[1:10],get_path))
rm(log)
system.time(log <-furrr::future_map_dfr(urls[1:10],get_path))
View(log)
plan(multisession,workers=7)
system.time(log2 <-furrr::future_map_dfr(urls[1:10],get_path))
plan(multisession,workers=4)
system.time(log2 <-furrr::future_map_dfr(urls[1:10],get_path))
plan(multisession,workers=4)
system.time(log2 <-furrr::future_map_dfr(urls[1:10],get_path))
plan(multisession,workers=2)
system.time(log2 <-furrr::future_map_dfr(urls[1:10],get_path))
plan(multisession,workers=2)
system.time(log2 <-furrr::future_map_dfr(urls[1:50],get_path))
plan(multisession,workers=4)
system.time(log2 <-furrr::future_map_dfr(urls[1:50],get_path))
plan(multisession,workers=4)
system.time(log2 <-furrr::future_map_dfr(urls[1:500],get_path))
plan(multisession,workers=1)
system.time(log2 <-furrr::future_map_dfr(urls[1:500],get_path))
plan(multisession,workers=7)
system.time(log2 <-furrr::future_map_dfr(urls[1:500],get_path))
log2
View(log2)
resp$headers$`x-cache`
get_path <- function(url){
resp <- httr::GET(url)
url = resp$url
time_seconds = resp$times["total"]
status = resp$status_code
cache = resp$headers$`x-cache`
return(data.frame(url,time_seconds,status,cache))
}
cores <- future::availableCores() - 1
plan(multisession,workers=cores)
log <-furrr::future_map_dfr(urls[1:20],get_path)
log
table(log$cache)
cores <- future::availableCores() - 1
plan(multisession,workers=cores)
log <-furrr::future_map_dfr(urls[1:100000],get_path)
write.csv(log,"cache_log.csv")
log <-furrr::future_map_dfr(urls[1:100000],get_path,.progress=TRUE)
cores <- future::availableCores() - 1
plan(multisession,workers=cores)
furrr::future_map_dfr(urls[1:100000],get_path,.progress=TRUE)
log <-furrr::future_map_dfr(urls[1:100000],get_path,.progress=TRUE)
library(progressr)
install.packages("progressr")
library(progressr)
?with_progress
with_progress({
log <-furrr::future_map_dfr(urls[1:1000],get_path,.progress=TRUE)
})
with_progress({
p <- progressor(steps=length(urls[1:1000]))
log <-furrr::future_map_dfr(urls[1:1000],~{
p()
get_path
})
})
urls{1:100}
urls[1:100]
length(urls[1:100])
with_progress({
p <- progressor(steps=length(urls[1:10]))
log <-furrr::future_map_dfr(urls[1:10],~{
p()
get_path
})
})
with_progress({
p <- progressor(steps=length(urls[1:10]))
log <-furrr::future_map(urls[1:10],~{
p()
get_path
})
})
?future_map
with_progress({
p <- progressor(steps=length(urls[1:10]))
log <-furrr::future_map(urls[1:10],~{
p()
get_path()
})
})
test <- urls[1:10]
with_progress({
p <- progressor(steps=length(test))
log <-furrr::future_map(test,~{
p()
get_path(.test)
})
})
with_progress({
p <- progressor(steps=length(test))
log <-furrr::future_map(test,~{
p()
get_path(.)
})
})
rm(log)
with_progress({
p <- progressor(steps=length(test))
log <-furrr::future_map(test,~{
p()
get_path(.)
})
})
log
furrr::future_map_dfr(urls[1:100],get_path,.progress=TRUE)
furrr::future_map_dfr(urls[2],get_path,.progress=TRUE)
httr::GET(urls[2])
httr::GET(urls[1])
get_path <- function(url){
resp <- httr::GET(url)
url = resp$url
time_seconds = resp$times["total"]
status = resp$status_code
cache = resp$headers$`x-cache`
return(data.frame(url,time_seconds,status,cache))
}
furrr::future_map_dfr(urls[1:100],get_path,.progress=TRUE)
cores
plan(multisession,workers=cores)